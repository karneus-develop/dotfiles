[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['md', 'markdown']

[[plugins]]
repo = "davidhalter/jedi-vim"
on_ft = ['python']
hook_add = '''
function! s:pick_executable(pathspecs) abort
  for pathspec in filter(a:pathspecs, '!empty(v:val)')
    for path in reverse(glob(pathspec, 0, 1))
      if executable(path)
        return path
      endif
    endfor
  endfor
  return ''
endfunction
if has('nvim')
  "let g:python_host_prog = s:pick_executable([
  "      \ '~/Documents/python_env/neovim2python/bin/python2'
  "      \])
  let g:python3_host_prog = s:pick_executable([
        \ 'Documents/envlist/neovim3/bin/python',
        \ '/usr/bin/python3',
        \ '/bin/python3',
        \])
endif
	let g:deoplete#sources#jedi#server_timeout=100
  let g:deoplete#sources#jedi#statement_length=100
	"let g:jedi#completions_enabled = 1
  "let g:jedi#completions_command = "<C-N>"
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
hook_add = '''
  "let g:deoplete#sources#jedi#python_path = 'Documents/envlist/neovim3/bin/python'
'''

[[plugins]]
repo = "zchee/deoplete-go"
build = 'make'
on_ft = 'go'
depends = ['deoplete.nvim']
hook_add = '''
  let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'  
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'typescript-language-server',
      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
      \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
      \ 'whitelist': ['typescript'],
      \ })
endif
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
let g:asyncomplete_log_file = expand('~/asyncomplete.log')
let g:asyncomplete_auto_popup = 1
imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
'''

# 非同期
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
merged = 0

[[plugins]]
repo = 'thinca/vim-quickrun'

